}
iterative_step(0, 1, 100, 100)
diff
min(abs(diff))
which(diff = min(abs(diff)))
which(diff == min(abs(diff)))
which(diff == -min(abs(diff)))
is.integer(which(diff == min(abs(diff))))
is.null(which(diff == min(abs(diff))))
is.na(which(diff == min(abs(diff))))
is.logical(which(diff == min(abs(diff))))
which(diff == min(abs(diff)))
is.logical(which(diff == -min(abs(diff))))
is.integer(which(diff == -min(abs(diff))))
is.na(which(diff == -min(abs(diff))))
is.logical(which(diff == -min(abs(diff))))
is.logical(which(diff == min(abs(diff))))
which(diff == min(abs(diff)))
which(diff == -min(abs(diff)))
is.logical( which(diff == -min(abs(diff))) )
is.logical( which(diff == min(abs(diff))) )
s <- logical(0)
all.equal(s, logical(0))
r <- 1
all.equal(r, logical(0))
all.equal(r, logical(0)) == FALSE
all.equal(s, logical(0)) == FALSE
all(s)
iterative_step <- function(y, x1, x2, ndots) {
points <- generate_points(ndots, x1, x2)
x_plot <- array()
y_plot <- array()
for (counter in 1 : length(points)) {
x_plot[counter] <- points[[counter]][1]
y_plot[counter] <- points[[counter]][2]
}
plot(x_plot, y_plot, type = "l", col = "darkorchid", lwd = 2)
abline(h = y, col = "coral", lwd = 2, lty = 2)
diff <- array()
for (counter in 1 : length(points)) {
diff[counter] <- points[[counter]][2] - y
}
if (min(abs(diff)) > 0) {
min_counter <- which(diff == min(abs(diff)))
} else {
min_counter <- which(diff == - min(abs(diff)))
}
arr <- array()
arr[1] <- min(abs(diff))
arr[2] <- -min(abs(diff))
for (counter_1 in 1 : length(arr)) {
for (counter_2 in 1 : length(diff)) {
if(diff[counter_2] == arr[counter_1]) {
min_counter <- counter_2
break
}
}
}
print(min_counter)
points(points[[min_counter]][1], points[[min_counter]][2], col = "skyblue", pch = 19)
res <- list()
res[[1]] <- points[[min_counter]][1]
res[[2]] <- points[[min_counter]][2]
return(res)
}
iterative_step(0, 1, 100, 100)
iterative_step <- function(y, x1, x2, ndots) {
points <- generate_points(ndots, x1, x2)
x_plot <- array()
y_plot <- array()
for (counter in 1 : length(points)) {
x_plot[counter] <- points[[counter]][1]
y_plot[counter] <- points[[counter]][2]
}
plot(x_plot, y_plot, type = "l", col = "darkorchid", lwd = 2)
abline(h = y, col = "coral", lwd = 2, lty = 2)
diff <- array()
for (counter in 1 : length(points)) {
diff[counter] <- points[[counter]][2] - y
}
if (min(abs(diff)) > 0) {
min_counter <- which(diff == min(abs(diff)))
} else {
min_counter <- which(diff == - min(abs(diff)))
}
arr <- array()
arr[1] <- min(abs(diff))
arr[2] <- -min(abs(diff))
for (counter_1 in 1 : length(arr)) {
for (counter_2 in 1 : length(diff)) {
if(diff[counter_2] == arr[counter_1]) {
min_counter <- counter_2
break
}
}
}
points(points[[min_counter]][1], points[[min_counter]][2], col = "skyblue", pch = 19)
res <- list()
res[[1]] <- points[[min_counter]][1]
res[[2]] <- points[[min_counter]][2]
return(res)
}
iterative_step(0, 1, 100, 100)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
print(res)
}
find_solution(0, 1, 100)
?whole
??whole
?gcd
??gcd
floor(52.4)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
xlim_1_new <- floor(res[[1]])
xlim_2_new <- floor(res[[2]])
interim <- iterative_stepy, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[2]]
print(res)
}
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
xlim_1_new <- floor(res[[1]])
xlim_2_new <- floor(res[[2]])
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[2]]
print(res)
}
find_solution(0, 1, 100)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
xlim_1_new <- floor(res[1])
xlim_2_new <- floor(res[1]) + 1
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[2]]
print(res)
}
res <- find_solution(0, 1, 100)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
xlim_1_new <- floor(res[1])
xlim_2_new <- floor(res[1]) + 1
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[1]]
print(res)
}
res <- find_solution(0, 1, 100)
res
tail(res, 1)
tail(res, 2)
tail(res, 2)[1]
floor(tail(res, 1))
floor(tail(res, 1) * 10) / 10
floor(tail(res, 1) * 10)
res
tail(res, 1)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
cat("Stage 1 \n")
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
xlim_1_new <- floor(res[1])
xlim_2_new <- floor(res[1]) + 1
cat("Stage 2 \n")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[1]]
cycle_counter <- 1
while(tail(res, 1) - tail(res, 2)[1] > precision) {
cat("Stage ", cycle_counter + 2, "\n")
xlim_1_new <- floor(tail(res, 1) * 10^(cycle_counter)) / 10^(cycle_counter)
xlim_2_new <- xlim_1_new + 10^(- cycle_counter)
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2 + cycle_counter] <- interim[[1]]
}
print(res)
}
res <- find_solution(0, 1, 100)
res <- find_solution(0, 1, 100, 0.001)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
cat("Stage 1: ")
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
cat(res[1], "\n")
xlim_1_new <- floor(res[1])
xlim_2_new <- floor(res[1]) + 1
cat("Stage 2: ")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[1]]
cat(res[2], "\n")
cycle_counter <- 1
cat(tail(res, 1) - tail(res, 2)[1])
while(tail(res, 1) - tail(res, 2)[1] > precision) {
cat("Stage ", cycle_counter + 2, ": ")
xlim_1_new <- floor(tail(res, 1) * 10^(cycle_counter)) / 10^(cycle_counter)
xlim_2_new <- xlim_1_new + 10^(- cycle_counter)
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2 + cycle_counter] <- interim[[1]]
print(res[2 + cycle_counter], "\n")
}
for (i in 1 : length(res)) {
cat("res[", i, "]: ", res[i], "\n")
}
}
res <- find_solution(0, 1, 100, 0.001)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
cat("Stage 1: ")
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
cat(res[1], "\n")
xlim_1_new <- floor(res[1])
xlim_2_new <- floor(res[1]) + 1
cat("Stage 2: ")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[1]]
cat(res[2], "\n")
cycle_counter <- 1
while(abs(tail(res, 1) - tail(res, 2)[1]) > precision) {
cat("Stage ", cycle_counter + 2, ": ")
xlim_1_new <- floor(tail(res, 1) * 10^(cycle_counter)) / 10^(cycle_counter)
xlim_2_new <- xlim_1_new + 10^(- cycle_counter)
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2 + cycle_counter] <- interim[[1]]
print(res[2 + cycle_counter], "\n")
cycle_counter <- cycle_counter + 1
}
for (i in 1 : length(res)) {
cat("res[", i, "]: ", res[i], "\n")
}
}
res <- find_solution(0, 1, 100, 0.001)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
cat("Stage 1: ")
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
cat(res[1], "\n")
xlim_1_new <- floor(res[1])
xlim_2_new <- floor(res[1]) + 1
cat("Stage 2: ")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[1]]
cat(res[2], "\n")
cycle_counter <- 1
while(abs(tail(res, 1) - tail(res, 2)[1]) > precision) {
cat("Stage", cycle_counter + 2, ": ")
xlim_1_new <- floor(tail(res, 1) * 10^(cycle_counter)) / 10^(cycle_counter)
xlim_2_new <- xlim_1_new + 10^(- cycle_counter)
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2 + cycle_counter] <- interim[[1]]
cat(res[2 + cycle_counter], "\n")
cycle_counter <- cycle_counter + 1
}
for (i in 1 : length(res)) {
cat("res[", i, "]: ", res[i], "\n")
}
}
res <- find_solution(0, 1, 100, 0.001)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
cat("------------\n")
cat("Xlim_1: ", xlim1, "\n")
cat("Xlim_2: ", xlim2, "\n")
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
cat("Stage 1: ", res[1], "\n")
cat("------------\n")
xlim_1_new <- floor(res[1])
xlim_2_new <- floor(res[1]) + 1
cat("------------\n")
cat("Xlim_1: ", xlim_1_new, "\n")
cat("Xlim_2: ", xlim_2_new, "\n")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[1]]
cat("Stage 2: ", res[2], "\n")
cat("------------\n")
cycle_counter <- 1
while(abs(tail(res, 1) - tail(res, 2)[1]) > precision) {
cat("------------\n")
xlim_1_new <- floor(tail(res, 1) * 10^(cycle_counter)) / 10^(cycle_counter)
xlim_2_new <- xlim_1_new + 10^(- cycle_counter)
cat("Xlim_1_new: ", xlim_1_new, "\n")
cat("Xlim_2_new: ", xlim_2_new, "\n")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2 + cycle_counter] <- interim[[1]]
cat("Stage", cycle_counter + 2, ": ", res[2 + cycle_counter], "\n")
cycle_counter <- cycle_counter + 1
cat("------------\n")
}
}
res <- find_solution(0, 1, 100, 0.001)
res <- find_solution(6, 1, 100, 0.001)
res <- find_solution(0.6, 1, 100, 0.001)
func(22.288, N, N, N)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
cat("------------\n")
cat("Xlim_1: ", xlim1, "\n")
cat("Xlim_2: ", xlim2, "\n")
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
cat("Stage 1: ", res[1], "\n")
cat("------------\n")
xlim_1_new <- floor(res[1])
xlim_2_new <- floor(res[1]) + 1
cat("------------\n")
cat("Xlim_1: ", xlim_1_new, "\n")
cat("Xlim_2: ", xlim_2_new, "\n")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[1]]
cat("Stage 2: ", res[2], "\n")
cat("------------\n")
cycle_counter <- 1
while(abs(tail(res, 1) - tail(res, 2)[1]) > precision) {
cat("------------\n")
xlim_1_new <- floor(tail(res, 1) * 10^(cycle_counter)) / 10^(cycle_counter)
xlim_2_new <- xlim_1_new + 10^(- cycle_counter)
cat("Xlim_1_new: ", xlim_1_new, "\n")
cat("Xlim_2_new: ", xlim_2_new, "\n")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2 + cycle_counter] <- interim[[1]]
cat("Stage", cycle_counter + 2, ": ", res[2 + cycle_counter], "\n")
cycle_counter <- cycle_counter + 1
cat("------------\n")
}
cat("Func from last res: ", func(res[length(res)]), "\n")
}
res <- find_solution(0.37, 1, 100, 0.001)
find_solution <- function(y, xlim1, xlim2, precision) {
res <- array(0)
cat("------------\n")
cat("Xlim_1: ", xlim1, "\n")
cat("Xlim_2: ", xlim2, "\n")
interim <- iterative_step(y, xlim1, xlim2, 1000)
res[1] <- interim[[1]]
cat("Stage 1: ", res[1], "\n")
cat("------------\n")
xlim_1_new <- floor(res[1])
xlim_2_new <- floor(res[1]) + 1
cat("------------\n")
cat("Xlim_1: ", xlim_1_new, "\n")
cat("Xlim_2: ", xlim_2_new, "\n")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2] <- interim[[1]]
cat("Stage 2: ", res[2], "\n")
cat("------------\n")
cycle_counter <- 1
while(abs(tail(res, 1) - tail(res, 2)[1]) > precision) {
cat("------------\n")
xlim_1_new <- floor(tail(res, 1) * 10^(cycle_counter)) / 10^(cycle_counter)
xlim_2_new <- xlim_1_new + 10^(- cycle_counter)
cat("Xlim_1_new: ", xlim_1_new, "\n")
cat("Xlim_2_new: ", xlim_2_new, "\n")
interim <- iterative_step(y, xlim_1_new, xlim_2_new, 1000)
res[2 + cycle_counter] <- interim[[1]]
cat("Stage", cycle_counter + 2, ": ", res[2 + cycle_counter], "\n")
cycle_counter <- cycle_counter + 1
cat("------------\n")
}
cat("Func from last res: ", func(res[length(res)], N, N, N), "\n")
}
res <- find_solution(0.37, 1, 100, 0.001)
x <- seq(1, 100, 1)
plot(x, func(x, 10, 10, 10), type = "l", col = "darkorchid", lwd = 2)
# points(x, func(x, 10, 10, 10), pch = 19, col = "skyblue")
abline(h = 0, col = "coral", lwd = 2, lty = 2)
x <- seq(-100, 100, 1)
plot(x, func(x, 10, 10, 10), type = "l", col = "darkorchid", lwd = 2)
# points(x, func(x, 10, 10, 10), pch = 19, col = "skyblue")
abline(h = 0, col = "coral", lwd = 2, lty = 2)
res <- find_solution(0.37, 1, 100, 0.0001)
133.95 - 73.29
60.66 / 10
60.66 * 0.15
60.66 * 0.10
25.29 - 20.71
4,58 / 60.66
4.58 / 60.66
21.07 - 20.71
0.36 / 0.075
21.07 - 20.71
1.290 - 1.31
1.290 - 1.131
0.16 / 026
0.16 / 0.26
20.849 - 20.71
20.827 - 20.71
1.290 - 1.266
1.290 - 1.264
1.290 - 1.131
0.159 + 0.117
1.227 - 1.131
dry <- c(8.00, 9.43, 8.88, 12.55, 11.15, 3.20, 4.86, 12.24, 5.25, 12.49, 12.13)
mean(dry)
water <- c(0.49, 0.59, 0.61, 0.02, 0.58)
mean(water)
(mean(dry) - mean(water))/ mean(dry)
ethanol <- c(4.99, 4.98, 5.14, 5.03)
mean(ethanol)
(mean(dry) - mean(ethanol)) / mean(dry)
propanol <- c(6.03, 7.93, 7.39, 8.44)
mean(propanol)
(mean(dry) - mean(propanol)) / mean(propanol)
buthanol <- c(8.67, 7.79, 8.31, 6.61, 9.01, 7.75, 7.2)
mean(buthanol)
(mean(dry) - mean(buthanol)) / mean(buthanol)
pentanol <- c(9.03, 9.03, 10.6, 8.62, 10.59, 9.35, 8.47)
mean(pentanol)
(mean(dry) - mean(pentanol)) / mean(pentanol)
(mean(dry) - mean(pentanol)) / mean(pentanol) * 100
hexanol <- c(7.29, 8.73, 10.67, 8.46, 10.32, 9.32, 9.37)
mean(hexanol)
(mean(dry) - mean(hexanol)) / mean(hexanol)
(mean(dry) - mean(hexanol)) / mean(hexanol) * 100
n <- c(2, 3, 4, 5, 6)
means <- c(mean(ethanol), mean(propanol), mean(buthanol), mean(pentanol), mean(hexanol))
points(n, means, pch = 19)
plot(n, means, pch = 19)
fit <- lm(means ~ n)
abline(fit, lty = 2, col = "skyblue")
plot(fit, lty = 2, col = "skyblue")
plot(fit$coefficients[1] * x + fit$coefficients[2], lty = 2, col = "skyblue")
x <- seq(2, 6, 0.01)
plot(fit$coefficients[1] * x + fit$coefficients[2], lty = 2, col = "skyblue")
plot(fit$coefficients[1] * x + fit$coefficients[2], type = "l", lty = 2, col = "skyblue")
points(n, means, pch = 19, col = "darkorchid")
x
plot(x, fit$coefficients[2] * x + fit$coefficients[1], type = "l", lty = 2, col = "skyblue")
points(n, means, pch = 19, col = "darkorchid")
means
x <- seq(0, 6, 0.01)
plot(x, fit$coefficients[2] * x + fit$coefficients[1], type = "l", lty = 2, col = "skyblue")
points(n, means, pch = 19, col = "darkorchid")
x <- seq(0, 6, 0.01)
plot(x, fit$coefficients[2] * x + fit$coefficients[1], type = "l", lty = 2, col = "skyblue",
title = "Зависимость среднего значения напряжения от атомности спирта", xlab = "Атомность спирта",
ylab = "Среднее значение напряжения")
points(n, means, pch = 19, col = "darkorchid")
x <- seq(0, 6, 0.01)
plot(x, fit$coefficients[2] * x + fit$coefficients[1], type = "l", lty = 2, col = "skyblue",
main = "Зависимость среднего значения напряжения от атомности спирта", xlab = "Атомность спирта",
ylab = "Среднее значение напряжения")
points(n, means, pch = 19, col = "darkorchid")
source('~/.active-rstudio-document')
72 + 5 + 13 + 60 + 6 + 16
72 + 4 + 12 + 1 + 16 + 16 + 15
172 * 1.15
170 / 40
600 * 4.25
3 / 40
3 / 40 / 22
3 / 40 / 2 * 1000
1/40
1/40 / 2
1/40 / 2 * 1000
60 + 14 + 12 + 16 + 1 + 4
2.5 / 1.5
17.333 - 17.319
1.211 - 1.123
1.240 - 1.123
1.350 - 1.123
1.241 - 1.123
72 + 5 + 13 + 60 + 16 + 4 + 13 + 60 + 14 + 4
117 / 261
72 + 5 + 13 + 60 + 16 + 4 + 13 + 72 + 4 + 15 + 16
118 / 290
72 + 4 + 12 + 16 + 1 + 12 + 16 + 1
(60 + 6 + 16)*2 + 13*2 + 72 + 4
266 * 0.25 / 1000
266 * 25 / 1000
6.65 * 34.89 / 100
#!/usr/bin/env Rscript
require( graphics )
# df <- read.table("1d.txt")
# acf( df, lag.max = 3, type = c("correlation"), plot = TRUE )
x <- c(1:5)
y <- x
par(pch=22, col="red")
plot(x, y, type = 'n' )
lines(x, y, type = 'l')
df <- read.table("1d.txt")
pwd
current_dir()
curr_dir()
pwd
cwd
wd
dir
dir()
setwd()
getwd()
setwd("/Users/mac/repos/mcint/MCMC/out")
getwd()
df <- read.table("1d.txt")
acf( df, lag.max = 3, type = c("correlation"), plot = TRUE )
acf( df, lag.max = 100, type = c("correlation"), plot = TRUE )
acf( df, lag.max = 50, type = c("correlation"), plot = TRUE )
acf( df, lag.max = 500, type = c("correlation"), plot = TRUE )
acf( df, lag.max = 5000, type = c("correlation"), plot = TRUE )
acf( df, lag.max = 50000, type = c("correlation"), plot = TRUE )
